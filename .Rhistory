if(num %% 2 == 0) {
return(TRUE)
} else {
return(FALSE)
}
}
#3
fahrenheit_to_celsius <- function(far) {
celsius <- (fah - 32) / (9/5)
print("The Fahrenheit degrees is:" + far)
print("The celsius degree is:" + celsius)
}
fahrenheit_to_celsius(45)
# Your code here
#1
add_three <- function(x) {
return(x + 3)
}
#2
is_even <- function(num) {
if(num %% 2 == 0) {
return(TRUE)
} else {
return(FALSE)
}
}
#3
fahrenheit_to_celsius <- function(far) {
celsius <- (far - 32) / (9/5)
print("The Fahrenheit degrees is:" + far)
print("The celsius degree is:" + celsius)
}
fahrenheit_to_celsius(45)
# Your code here
#1
add_three <- function(x) {
return(x + 3)
}
#2
is_even <- function(num) {
if(num %% 2 == 0) {
return(TRUE)
} else {
return(FALSE)
}
}
#3
fahrenheit_to_celsius <- function(far) {
celsius <- (far - 32) / (9/5)
paste("The Fahrenheit degrees is:", far)
paste("The celsius degree is:", celsius)
}
fahrenheit_to_celsius(45)
# Your code here
#1
students <- data.frame(
Name = c("Alice", "Bob", "Charlie", "Diana", "Ethan", "Fiona", "Geogre", "Hannah", "Irene", "Jack"),
Age = c(20, 22, 19, 21, 23, 20, 22, 21, 20, 22),
Major = c('Mathematics', 'Physics', 'Engineering', 'Biology', 'Computer Science', 'Chemistry', 'Economics','Psychology', 'Art', 'Literature')
)
# Your code here
#1
students <- data.frame(
Name = c("Alice", "Bob", "Charlie", "Diana", "Ethan", "Fiona", "Geogre", "Hannah", "Irene", "Jack"),
Age = c(20, 22, 19, 21, 23, 20, 22, 21, 20, 22),
Major = c('Mathematics', 'Physics', 'Engineering', 'Biology', 'Computer Science', 'Chemistry', 'Economics','Psychology', 'Art', 'Literature')
)
students
# Your code here
#1
students <- data.frame(
Name = c("Alice", "Bob", "Charlie", "Diana", "Ethan", "Fiona", "Geogre", "Hannah", "Irene", "Jack"),
Age = c(20, 22, 19, 21, 23, 20, 22, 21, 20, 22),
Major = c('Mathematics', 'Physics', 'Engineering', 'Biology', 'Computer Science', 'Chemistry', 'Economics','Psychology', 'Art', 'Literature')
)
#2
student$GPA = c(3.5, 3.8, 3.2, 3.7, 3.9, 3.4, 3.6, 3.8, 3.3, 3.7)
# Your code here
#1
students <- data.frame(
Name = c("Alice", "Bob", "Charlie", "Diana", "Ethan", "Fiona", "Geogre", "Hannah", "Irene", "Jack"),
Age = c(20, 22, 19, 21, 23, 20, 22, 21, 20, 22),
Major = c('Mathematics', 'Physics', 'Engineering', 'Biology', 'Computer Science', 'Chemistry', 'Economics','Psychology', 'Art', 'Literature')
)
#2
student$GPA <- c(3.5, 3.8, 3.2, 3.7, 3.9, 3.4, 3.6, 3.8, 3.3, 3.7)
# Your code here
#1
students <- data.frame(
Name = c("Alice", "Bob", "Charlie", "Diana", "Ethan", "Fiona", "Geogre", "Hannah", "Irene", "Jack"),
Age = c(20, 22, 19, 21, 23, 20, 22, 21, 20, 22),
Major = c('Mathematics', 'Physics', 'Engineering', 'Biology', 'Computer Science', 'Chemistry', 'Economics','Psychology', 'Art', 'Literature')
)
#2
cbind(students, GPA = c(3.5, 3.8, 3.2, 3.7, 3.9, 3.4, 3.6, 3.8, 3.3, 3.7))
# Your code here
#1
students <- data.frame(
Name = c("Alice", "Bob", "Charlie", "Diana", "Ethan", "Fiona", "Geogre", "Hannah", "Irene", "Jack"),
Age = c(20, 22, 19, 21, 23, 20, 22, 21, 20, 22),
Major = c('Mathematics', 'Physics', 'Engineering', 'Biology', 'Computer Science', 'Chemistry', 'Economics','Psychology', 'Art', 'Literature')
)
#2
#cbind(students, GPA = c(3.5, 3.8, 3.2, 3.7, 3.9, 3.4, 3.6, 3.8, 3.3, 3.7))
students$GPA <-  c(3.5, 3.8, 3.2, 3.7, 3.9, 3.4, 3.6, 3.8, 3.3, 3.7)
# Your code here
#1
students <- data.frame(
Name = c("Alice", "Bob", "Charlie", "Diana", "Ethan", "Fiona", "Geogre", "Hannah", "Irene", "Jack"),
Age = c(20, 22, 19, 21, 23, 20, 22, 21, 20, 22),
Major = c('Mathematics', 'Physics', 'Engineering', 'Biology', 'Computer Science', 'Chemistry', 'Economics','Psychology', 'Art', 'Literature')
)
#2
#cbind(students, GPA = c(3.5, 3.8, 3.2, 3.7, 3.9, 3.4, 3.6, 3.8, 3.3, 3.7))
students$GPA <-  c(3.5, 3.8, 3.2, 3.7, 3.9, 3.4, 3.6, 3.8, 3.3, 3.7)
students
# Your code here
#1
students <- data.frame(
Name = c("Alice", "Bob", "Charlie", "Diana", "Ethan", "Fiona", "Geogre", "Hannah", "Irene", "Jack"),
Age = c(20, 22, 19, 21, 23, 20, 22, 21, 20, 22),
Major = c('Mathematics', 'Physics', 'Engineering', 'Biology', 'Computer Science', 'Chemistry', 'Economics','Psychology', 'Art', 'Literature')
)
#2
#cbind(students, GPA = c(3.5, 3.8, 3.2, 3.7, 3.9, 3.4, 3.6, 3.8, 3.3, 3.7))
students$GPA <-  c(3.5, 3.8, 3.2, 3.7, 3.9, 3.4, 3.6, 3.8, 3.3, 3.7)
students
#3
students[students$Major,]
# Your code here
#1
students <- data.frame(
Name = c("Alice", "Bob", "Charlie", "Diana", "Ethan", "Fiona", "Geogre", "Hannah", "Irene", "Jack"),
Age = c(20, 22, 19, 21, 23, 20, 22, 21, 20, 22),
Major = c('Mathematics', 'Physics', 'Engineering', 'Biology', 'Computer Science', 'Chemistry', 'Economics','Psychology', 'Art', 'Literature')
)
#2
#cbind(students, GPA = c(3.5, 3.8, 3.2, 3.7, 3.9, 3.4, 3.6, 3.8, 3.3, 3.7))
students$GPA <-  c(3.5, 3.8, 3.2, 3.7, 3.9, 3.4, 3.6, 3.8, 3.3, 3.7)
students
#3
students[Major]
# Your code here
#1
students <- data.frame(
Name = c("Alice", "Bob", "Charlie", "Diana", "Ethan", "Fiona", "Geogre", "Hannah", "Irene", "Jack"),
Age = c(20, 22, 19, 21, 23, 20, 22, 21, 20, 22),
Major = c('Mathematics', 'Physics', 'Engineering', 'Biology', 'Computer Science', 'Chemistry', 'Economics','Psychology', 'Art', 'Literature')
)
#2
#cbind(students, GPA = c(3.5, 3.8, 3.2, 3.7, 3.9, 3.4, 3.6, 3.8, 3.3, 3.7))
students$GPA <-  c(3.5, 3.8, 3.2, 3.7, 3.9, 3.4, 3.6, 3.8, 3.3, 3.7)
students
#3
students[students$Major]
# Your code here
#1
students <- data.frame(
Name = c("Alice", "Bob", "Charlie", "Diana", "Ethan", "Fiona", "Geogre", "Hannah", "Irene", "Jack"),
Age = c(20, 22, 19, 21, 23, 20, 22, 21, 20, 22),
Major = c('Mathematics', 'Physics', 'Engineering', 'Biology', 'Computer Science', 'Chemistry', 'Economics','Psychology', 'Art', 'Literature')
)
#2
#cbind(students, GPA = c(3.5, 3.8, 3.2, 3.7, 3.9, 3.4, 3.6, 3.8, 3.3, 3.7))
students$GPA <-  c(3.5, 3.8, 3.2, 3.7, 3.9, 3.4, 3.6, 3.8, 3.3, 3.7)
students
#3
students$Major
# Your code here
#1
students <- data.frame(
Name = c("Alice", "Bob", "Charlie", "Diana", "Ethan", "Fiona", "Geogre", "Hannah", "Irene", "Jack"),
Age = c(20, 22, 19, 21, 23, 20, 22, 21, 20, 22),
Major = c('Mathematics', 'Physics', 'Engineering', 'Biology', 'Computer Science', 'Chemistry', 'Economics','Psychology', 'Art', 'Literature')
)
#2
#cbind(students, GPA = c(3.5, 3.8, 3.2, 3.7, 3.9, 3.4, 3.6, 3.8, 3.3, 3.7))
students$GPA <-  c(3.5, 3.8, 3.2, 3.7, 3.9, 3.4, 3.6, 3.8, 3.3, 3.7)
#3
students$Major
# Your code here
install.packages('MASS')
library('Boston')
# Your code here
install.packages('MASS')
library(Boston)
# Your code here
install.packages('MASS')
library(MASS)
library(Boston)
# Your code here
install.packages('MASS')
library(MASS)
head(MASS)
# Your code here
install.packages('MASS')
library(MASS)
# Your code here
#install.packages('MASS')
library(MASS)
?Boston
# Your code here
#install.packages('MASS')
library(MASS)
Boston
# Your code here
#1
#install.packages('MASS')
library(MASS)
#2
Boston
#3
head(Boston, 6)
# Your code here
#1
Boston
# Your code here
#1
Boston
ggplot(Boston, aes(x = medv, y = lstat) labs(title = "Scaterplot of Median Value vs Percentage", y = "lstat", x = "medv", subtitle = "Generated by ggplot in R")
# Your code here
#1
Boston
plot(Boston, aes(x = medv, y = lstat) labs(title = "Scaterplot of Median Value vs Percentage", y = "lstat", x = "medv", subtitle = "Generated by ggplot in R")
# Your code here
#1
Boston
plot(Boston, x = medv, y = lstat, labs(title = "Scaterplot of Median Value vs Percentage", y = "lstat", x = "medv", subtitle = "Generated by ggplot in R"))
# Your code here
#1
Boston
plot(Boston, x = Boston$medv, y = Boston$lstat, labs(title = "Scaterplot of Median Value vs Percentage", y = "lstat", x = "medv", subtitle = "Generated by ggplot in R"))
# Your code here
#1
Boston
plot(Boston, x = Boston$medv, y = Boston$lstat)
departments <- c("Finance", "HR", "IT", "Marketing", "Operations")
# Replace the incorrect entry in the vector
departments["Marketing"] <- "Sales and Marketing"
# Replace the incorrect entry in the vector
departments["Marketing"] <- "Sales and Marketing"
departments
# Replace the incorrect entry in the vector
departments[4] <- "Sales and Marketing"
departments
departments <- c("Finance", "HR", "IT", "Marketing", "Operations")
departments
departments <- c("Finance", "HR", "IT", "Marketing", "Operations")
departments
# Replace the incorrect entry in the vector
departments[4] <- "Sales and Marketing"
departments
# Create the function to print each department and its position
print_departments <- function() {
for (i in departments) {
print(i)
}
}
print_departments()
# Create the function to print each department and its position
print_departments <- function(departments) {
for (i in departments) {
print(i)
}
}
print_departments()
# Create the function to print each department and its position
print_departments <- function(departments) {
for (i in departments) {
print(i)
}
}
print_departments(departments)
# Create the data frame
department_budget <- data.frame(
Department = c("Finance", "HR", "IT", "Sales and Marketing", "Operations"),
Budget =  c(5.0, 2.0, 8.0, 4.5, 6.0)
)
# Create the data frame
department_budget <- data.frame(
Department = c("Finance", "HR", "IT", "Sales and Marketing", "Operations"),
Budget =  c(5.0, 2.0, 8.0, 4.5, 6.0)
)
department_budget
# Update the budget of IT department
department_budget[,3] <- 1.5
# Update the budget of IT department
department_budget[,3] <- 1.5
department_budget
# Update the budget of IT department
department_budget[3,3] <- 1.5
department_budget
# Update the budget of IT department
department_budget[3,3] <- department_budget[3,3] + 1.5
department_budget
# Update the budget of IT department
department_budget[3,]$Budget <- department_budget[3,]$Budget + 1.5
department_budget
# Update the budget of IT department
department_budget[department_budget$Department=="IT",]$Budget <- department_budget[department_budget$Department=="IT",]$Budget + 1.5
department_budget
# Update the budget of IT department
department_budget[department_budget$Department == "IT",]$Budget <- department_budget[department_budget$Department == "IT",]$Budget + 1.5
department_budget
# Update the budget of IT department
department_budget[department_budget$Department == "IT",]$Budget <- department_budget[department_budget$Department == "IT",]$Budget + 1.5
department_budget
# Update the budget of IT department
department_budget[department_budget$Department == "IT",]$Budget <- department_budget[department_budget$Department == "IT",]$Budget + 1.5
department_budget
# Update the budget of IT department
department_budget[department_budget$Department == "IT",]$Budget <- department_budget[department_budget$Department == "IT",]$Budget + 1.5
department_budget
# Update the budget of IT department
department_budget[department_budget$Department == "IT",]$Budget <- department_budget[department_budget$Department == "IT",]$Budget + 1.5
department_budget
# Create the data frame
department_budget <- data.frame(
Department = c("Finance", "HR", "IT", "Sales and Marketing", "Operations"),
Budget =  c(5.0, 2.0, 8.0, 4.5, 6.0)
)
department_budget
# Update the budget of IT department
department_budget[department_budget$Department == "IT",]$Budget <- department_budget[department_budget$Department == "IT",]$Budget + 1.5
department_budget
# Calculate the total budget
total <- sum(department_budget[department_budget$Budget,])
# Calculate the total budget
total <- sum(department_budget$Budget)
# Calculate the total budget
total <- sum(department_budget$Budget)
total
# Calculate the total budget
department_budget$Budget
# Calculate the total budget
department_budget$Budget
# Calculate the total budget
mean(department_budget$Budget)
median(department_budget$Budget)
sales_data <- data.frame(
Quarter = c("Q1", "Q2", "Q3", "Q4"),
Product_A = c(15000, 22000, 18000, 24000),
Product_B = c(18000, 20000, 21000, 23000)
)
sales_data
# Create the Total_Sales column
sales_data$Total_Sales <- sales_data$Product_A + sales_data$Product_B
sales_data
# Load necessary packages
library(dplyr)
library(ggplot2) # Contains the diamonds dataset
Cars_Ex10 <- Cars93 %>% mutate(HPpliter=Horsepower/EngineSize) %>% select(Model, Type, EngineSize,
Cylinders, Horsepower, MPG.highway,
HPpliter) %>% arrange(Cylinders,desc(Horsepower))
head(Cars_Ex10)
barplot(head(Cars_Ex10))
head(diamonds)
#1
library(diamonds)
#1
data(diamonds)
#2
head(diamonds, 6)
#3
glimpse(diamonds)
#3
glimpse(diamonds)
#1
diamonds_small <- data.frame(
Carat = c(diamonds$carat),
Cut = c(diamonds$cut),
Color = c(diamonds$color),
Price = c(diamonds$price)
)
#1
diamonds_small <- data.frame(
Carat = c(diamonds$carat),
Cut = c(diamonds$cut),
Color = c(diamonds$color),
Price = c(diamonds$price)
)
diamonds_small
#1
diamonds_small <- data.frame(
Carat = c(diamonds$carat),
Cut = c(diamonds$cut),
Color = c(diamonds$color),
Price = c(diamonds$price)
)
#2
head(diamonds_small, 6)
#1
diamonds_ex1 <- filter(diamonds, cut=="Ideal", color=="E")
#1
ideal_E_diamonds <- filter(diamonds, cut=="Ideal", color=="E")
ideal_E_diamonds
#1
diamonds_arranged <- arrange(desc(diamonds$price))
#1
diamonds_arranged <- arrange(diamonds, desc(diamonds$price))
#2
head(diamonds_arranged,10)
#1
diamonds_small <- data.frame(
select(diamonds$carat, diamonds$cut, diamonds$color, diamonds$price)
)
#1
price_gay <- diamonds %>% mutate(price_per_carat=price / carat)
#1
price_gay <- diamonds %>% mutate(price_per_carat=price / carat)
head(price_gay)
#1
price_gay <- diamonds %>% mutate(price_per_carat=price / carat) %>% select(carat, cut, color, clarity, depth, table, price, price_per_carat)
head(price_gay)
head(txhousing)
library(ggplot2)
library(dplyr)
data("txhousing")
head(txhousing)
# which cities are growing the most over this timeframe:
city_growth <- txhousing_filtered %>% group_by(city) %>% summarise(total_sales = sum(sales, na.rm = TRUE),
avg_sales_price = mean(median, na.rm = TRUE)) %>%
arrange(desc(total_sales))
# excluding the Great Recession which broadly ran from 2008 to 2009:
txhousing_filtered <- txhousing %>% filter(year < 2008 | year > 2009)
# which cities are growing the most over this timeframe:
city_growth <- txhousing_filtered %>% group_by(city) %>% summarise(total_sales = sum(sales, na.rm = TRUE),
avg_sales_price = mean(median, na.rm = TRUE)) %>%
arrange(desc(total_sales))
city_growth
library(MASS)
library(dplyr)
data(Cars93)
cars <- Cars93 %>% select(Min.Price, Max.Price, MPG.city, MPG.highway, Fuel.tank.capacity)
min_and_max_price_dist <- matrix(c(cars$Min.Price, cars$Max.Price), byrow=3)
min_and_max_price_dist
min_and_max_price_dist <- matrix(c(cars$Min.Price, cars$Max.Price), nrow = 3  , byrow=3)
min_and_max_price_dist
dist(min_and_max_price_dist, method = "manhattan")
library(ggplot2)
data("diamonds")
View(diamonds)
diamonds_filtered <- diamonds %<% filter(cut="Premium", color=c("J", "K", "L"))
diamonds_filtered <- diamonds %>% filter(cut="Premium", color=c("J", "K", "L"))
diamonds_filtered <- diamonds %>% filter(cut="Premium", color %in% c("J", "K", "L"))
cluster_data <- read.csv("data/cluster_data.csv")
library(ggplot2)
plot(cluster_data)
Kmeans_3 <- kmeans(cluster_data, centers = 3)
Kmeans_4 <- kmeans(cluster_data, centers = 4)
plot(X2~X1, data = cluster_data,xlim=c(0,4),ylim=c(0,4),cex.axis=1.3,
+ cex.lab=1.2,cex=1.2,pch=15 + Kmeans_3$cluster, col= Kmeans_3$cluster)
plot(X2~X1, data = cluster_data,xlim=c(0,4),ylim=c(0,4),cex.axis=1.3, cex.lab=1.2,cex=1.2,pch=15 + Kmeans_3$cluster, col= Kmeans_3$cluster)
plot(x2~x1, data = cluster_data,xlim=c(0,4),ylim=c(0,4),cex.axis=1.3, cex.lab=1.2,cex=1.2,pch=15 + Kmeans_3$cluster, col= Kmeans_3$cluster)
plot(x2~x1, data = cluster_data,xlim=c(0,4),ylim=c(0,4),cex.axis=1.3, cex.lab=1.2,cex=1.2,pch=15 + Kmeans_4$cluster, col= Kmeans_4$cluster)
Kmeans_3_50 <- kmeans(cluster_data, 3, nstart = 50)
Kmeans_4_50 <- kmeans(cluster_data, 4, nstart = 50)
plot(x2~x1, data = cluster_data,xlim=c(0,4),ylim=c(0,4),cex.axis=1.3, cex.lab=1.2,cex=1.2,pch=15 + Kmeans_3_50$cluster, col= Kmeans_3_50$cluster)
plot(x2~x1, data = cluster_data,xlim=c(0,4),ylim=c(0,4),cex.axis=1.3, cex.lab=1.2,cex=1.2,pch=15 + Kmeans_4_50$cluster, col= Kmeans_4_50$cluster)
plot(x2~x1, data = cluster_data,xlim=c(0,4),ylim=c(0,4),cex.axis=1.3, cex.lab=1.2,cex=1.2,pch=15 + Kmeans_3_50$cluster, col= Kmeans_3_50$cluster)
plot(x2~x1, data = cluster_data,xlim=c(0,4),ylim=c(0,4),cex.axis=1.3, cex.lab=1.2,cex=1.2,pch=15 + Kmeans_4_50$cluster, col= Kmeans_4_50$cluster)
wgss <- rep(1,10)
for(i in 2:10) {
wgss[i]<-kmeans(cluster_data,centers=i-1,nstart=50)$tot.withinss
}
plot(c(2:10), wgss, type = "b", ,pch=16,cex=1.3,ylim=c(0,100),xlab="Number of Groups",ylab="WGSS")
plot(c(2:10), wgss, type = "b", ,pch=16,xlab="Number of Groups",ylab="WGSS")
plot(c(2:10), wgss, type = "b", pch=16,xlab="Number of Groups",ylab="WGSS")
plot(c(2:10), wgss, type = "b", pch=16)
wgss <- rep()
for(i in 2:10) {
wgss[i]<-kmeans(cluster_data,centers=i-1,nstart=50)$tot.withinss
}
plot(c(2:10), wgss, type = "b", pch=16)
wgss[i]<-kmeans(cluster_data,centers=i+1,nstart=50)$tot.withinss
for(i in 1:9) {
wgss[i]<-kmeans(cluster_data,centers=i+1,nstart=50)$tot.withinss
}
plot(c(2:10), wgss, type = "b", pch=16)
wgss <- c()
for(i in 1:9) {
wgss[i]<-kmeans(cluster_data,centers=i+1,nstart=50)$tot.withinss
}
plot(c(2:10), wgss, type = "b", pch=16)
wgss[i]<-kmeans(cluster_data,centers=i,nstart=50)$tot.withinss
for(i in 2:10) {
wgss[i]<-kmeans(cluster_data,centers=i,nstart=50)$tot.withinss
}
plot(c(2:10), wgss, type = "b", pch=16)
wgss[i]<-kmeans(cluster_data,centers=i-1,nstart=50)$tot.withinss
for(i in 2:10) {
wgss[i]<-kmeans(cluster_data,centers=i-1,nstart=50)$tot.withinss
}
plot(c(2:10), wgss, type = "b", pch=16)
1
1
wgss[i]<-kmeans(cluster_data,centers=i+1,nstart=50)$tot.withinss
for(i in 1:9) {
wgss[i]<-kmeans(cluster_data,centers=i+1,nstart=50)$tot.withinss
}
for(i in 1:9) {
wgss[i]<-kmeans(cluster_data,centers=i+1,nstart=50)$tot.withinss
}
plot(c(2:10), wgss, type = "b", pch=16)
wgss <- c()
for(i in 1:9) {
wgss[i]<-kmeans(cluster_data,centers=i+1,nstart=50)$tot.withinss
}
plot(c(2:10), wgss, type = "b", pch=16)
library(tidyverse)
Mammals_Milk<-read.csv("Milk_Composition.csv",header=T,row.names=1)
head(Mammals_Milk)
